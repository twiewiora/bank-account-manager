/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gen.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-09")
public class LoanResponse implements org.apache.thrift.TBase<LoanResponse, LoanResponse._Fields>, java.io.Serializable, Cloneable, Comparable<LoanResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanResponse");

  private static final org.apache.thrift.protocol.TField FOREIGN_CURRENCY_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignCurrencyCost", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LOCAL_CURRENCY_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("localCurrencyCost", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoanResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoanResponseTupleSchemeFactory();

  public Money foreignCurrencyCost; // required
  public Money localCurrencyCost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOREIGN_CURRENCY_COST((short)1, "foreignCurrencyCost"),
    LOCAL_CURRENCY_COST((short)2, "localCurrencyCost");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOREIGN_CURRENCY_COST
          return FOREIGN_CURRENCY_COST;
        case 2: // LOCAL_CURRENCY_COST
          return LOCAL_CURRENCY_COST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOREIGN_CURRENCY_COST, new org.apache.thrift.meta_data.FieldMetaData("foreignCurrencyCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Money.class)));
    tmpMap.put(_Fields.LOCAL_CURRENCY_COST, new org.apache.thrift.meta_data.FieldMetaData("localCurrencyCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Money.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanResponse.class, metaDataMap);
  }

  public LoanResponse() {
  }

  public LoanResponse(
    Money foreignCurrencyCost,
    Money localCurrencyCost)
  {
    this();
    this.foreignCurrencyCost = foreignCurrencyCost;
    this.localCurrencyCost = localCurrencyCost;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanResponse(LoanResponse other) {
    if (other.isSetForeignCurrencyCost()) {
      this.foreignCurrencyCost = new Money(other.foreignCurrencyCost);
    }
    if (other.isSetLocalCurrencyCost()) {
      this.localCurrencyCost = new Money(other.localCurrencyCost);
    }
  }

  public LoanResponse deepCopy() {
    return new LoanResponse(this);
  }

  @Override
  public void clear() {
    this.foreignCurrencyCost = null;
    this.localCurrencyCost = null;
  }

  public Money getForeignCurrencyCost() {
    return this.foreignCurrencyCost;
  }

  public LoanResponse setForeignCurrencyCost(Money foreignCurrencyCost) {
    this.foreignCurrencyCost = foreignCurrencyCost;
    return this;
  }

  public void unsetForeignCurrencyCost() {
    this.foreignCurrencyCost = null;
  }

  /** Returns true if field foreignCurrencyCost is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignCurrencyCost() {
    return this.foreignCurrencyCost != null;
  }

  public void setForeignCurrencyCostIsSet(boolean value) {
    if (!value) {
      this.foreignCurrencyCost = null;
    }
  }

  public Money getLocalCurrencyCost() {
    return this.localCurrencyCost;
  }

  public LoanResponse setLocalCurrencyCost(Money localCurrencyCost) {
    this.localCurrencyCost = localCurrencyCost;
    return this;
  }

  public void unsetLocalCurrencyCost() {
    this.localCurrencyCost = null;
  }

  /** Returns true if field localCurrencyCost is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalCurrencyCost() {
    return this.localCurrencyCost != null;
  }

  public void setLocalCurrencyCostIsSet(boolean value) {
    if (!value) {
      this.localCurrencyCost = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FOREIGN_CURRENCY_COST:
      if (value == null) {
        unsetForeignCurrencyCost();
      } else {
        setForeignCurrencyCost((Money)value);
      }
      break;

    case LOCAL_CURRENCY_COST:
      if (value == null) {
        unsetLocalCurrencyCost();
      } else {
        setLocalCurrencyCost((Money)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FOREIGN_CURRENCY_COST:
      return getForeignCurrencyCost();

    case LOCAL_CURRENCY_COST:
      return getLocalCurrencyCost();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FOREIGN_CURRENCY_COST:
      return isSetForeignCurrencyCost();
    case LOCAL_CURRENCY_COST:
      return isSetLocalCurrencyCost();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanResponse)
      return this.equals((LoanResponse)that);
    return false;
  }

  public boolean equals(LoanResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_foreignCurrencyCost = true && this.isSetForeignCurrencyCost();
    boolean that_present_foreignCurrencyCost = true && that.isSetForeignCurrencyCost();
    if (this_present_foreignCurrencyCost || that_present_foreignCurrencyCost) {
      if (!(this_present_foreignCurrencyCost && that_present_foreignCurrencyCost))
        return false;
      if (!this.foreignCurrencyCost.equals(that.foreignCurrencyCost))
        return false;
    }

    boolean this_present_localCurrencyCost = true && this.isSetLocalCurrencyCost();
    boolean that_present_localCurrencyCost = true && that.isSetLocalCurrencyCost();
    if (this_present_localCurrencyCost || that_present_localCurrencyCost) {
      if (!(this_present_localCurrencyCost && that_present_localCurrencyCost))
        return false;
      if (!this.localCurrencyCost.equals(that.localCurrencyCost))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetForeignCurrencyCost()) ? 131071 : 524287);
    if (isSetForeignCurrencyCost())
      hashCode = hashCode * 8191 + foreignCurrencyCost.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocalCurrencyCost()) ? 131071 : 524287);
    if (isSetLocalCurrencyCost())
      hashCode = hashCode * 8191 + localCurrencyCost.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LoanResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetForeignCurrencyCost()).compareTo(other.isSetForeignCurrencyCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignCurrencyCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignCurrencyCost, other.foreignCurrencyCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocalCurrencyCost()).compareTo(other.isSetLocalCurrencyCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalCurrencyCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localCurrencyCost, other.localCurrencyCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LoanResponse(");
    boolean first = true;

    sb.append("foreignCurrencyCost:");
    if (this.foreignCurrencyCost == null) {
      sb.append("null");
    } else {
      sb.append(this.foreignCurrencyCost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localCurrencyCost:");
    if (this.localCurrencyCost == null) {
      sb.append("null");
    } else {
      sb.append(this.localCurrencyCost);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (foreignCurrencyCost != null) {
      foreignCurrencyCost.validate();
    }
    if (localCurrencyCost != null) {
      localCurrencyCost.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoanResponseStandardScheme getScheme() {
      return new LoanResponseStandardScheme();
    }
  }

  private static class LoanResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoanResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOREIGN_CURRENCY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.foreignCurrencyCost = new Money();
              struct.foreignCurrencyCost.read(iprot);
              struct.setForeignCurrencyCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCAL_CURRENCY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.localCurrencyCost = new Money();
              struct.localCurrencyCost.read(iprot);
              struct.setLocalCurrencyCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.foreignCurrencyCost != null) {
        oprot.writeFieldBegin(FOREIGN_CURRENCY_COST_FIELD_DESC);
        struct.foreignCurrencyCost.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.localCurrencyCost != null) {
        oprot.writeFieldBegin(LOCAL_CURRENCY_COST_FIELD_DESC);
        struct.localCurrencyCost.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoanResponseTupleScheme getScheme() {
      return new LoanResponseTupleScheme();
    }
  }

  private static class LoanResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoanResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetForeignCurrencyCost()) {
        optionals.set(0);
      }
      if (struct.isSetLocalCurrencyCost()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetForeignCurrencyCost()) {
        struct.foreignCurrencyCost.write(oprot);
      }
      if (struct.isSetLocalCurrencyCost()) {
        struct.localCurrencyCost.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.foreignCurrencyCost = new Money();
        struct.foreignCurrencyCost.read(iprot);
        struct.setForeignCurrencyCostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.localCurrencyCost = new Money();
        struct.localCurrencyCost.read(iprot);
        struct.setLocalCurrencyCostIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

